<?php

DEFINE('DOTPAY_PAYMENT_TYPE', '0');
DEFINE('DOTPAY_API_VERSION', 'dev');

function commerce_dotpay_form_commerce_checkout_form_alter(&$form, &$form_state) {
	// If this checkout form contains the payment method radios...
	if (!empty($form['commerce_payment']['payment_method']['#options'])) {
		// Loop over its options array looking for a PayPal WPS option.
		foreach ($form['commerce_payment']['payment_method']['#options'] as $key => &$value) {
			list($method_id, $rule_name) = explode('|', $key);

			// If we find PayPal WPS...
			if ($method_id == 'commerce_dotpay_payment') {
				// Prepare the replacement radio button text with icons.
				$img = commerce_dotpay_icon();

				$value =$img.$value;
				break;
			}
		}
	}
}

function commerce_dotpay_icon(){
	$iconParameters = array(
		'path' => drupal_get_path('module', 'commerce_dotpay') . '/images/dotpay.jpeg',
		'title' => 'dotpay icon',
		'alt' => 'dotpay icon',
		'attributes' => array(
		),
	);
	return theme('image', $iconParameters);
}

function commerce_dotpay_help($path, $arg) {
	switch ($path) {
		case "admin/help/ah":
			return '<p>' . t("Integrate dotpay payment method") . '</p>';
			break;
	}
}

function commerce_dotpay_menu() {
	$items['dotpay/callback/%commerce_payment_method_instance'] = array(
		'page callback' => 'commerce_dotpay_callback',
		'page arguments' => array(2),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}

function commerce_dotpay_callback($payment_method) {

	if(!commerce_dotpay_is_trusted_request()){
		return true;
	}
	if(	   !isset($_POST['id']) ||
		   !isset($_POST['control']) ||
		   !isset($_POST['signature']) ||
		   !isset($_POST['operation_number']) ||
		   !isset($_POST['operation_original_amount'])
		){
			echo 'Incomplete request from dotpay';
			return true;
		}

		$order = commerce_order_load($_POST['control']);
		$hash = commerce_dotpay_calculate_hash($payment_method['settings']['pin'], $_POST);


		$transactions = commerce_payment_transaction_load_multiple(array(), array('instance_id' => $payment_method['instance_id'], 'order_id' => $_POST['control']));
		$transaction = array_pop($transactions);

		if(!$transaction){
			echo 'Transaction not found';
			return true;
		}

		$transaction->remote_id = $_POST['operation_number'];
		$transaction->remote_status = $_POST['operation_status'];
		$transaction->payload[REQUEST_TIME] = $_POST;
		$transaction->currency_code = $_POST['operation_currency'];

		if(!commerce_dotpay_price_validate($transaction, $order, $_POST['operation_original_amount'])){
			$transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
			$transaction->message = t("Prices doesn't match");
			commerce_payment_transaction_save($transaction);
			echo 'Prices doesnt match';
			return true;
		}

		if(!$_POST['id'] == $payment_method['settings']['identifier']){
			$transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
			$transaction->message = t("Identifier does not mach");
			commerce_payment_transaction_save($transaction);
			echo 'Identifier does not mach';
			return true;

		}

		if(!$_POST['signature'] == $hash){
			$transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
			$transaction->message = t("Signature does not mach");
			commerce_payment_transaction_save($transaction);
			echo 'Signature does not mach';
			return true;
		}

		switch($_POST['operation_status']){
			case 'rejected':
				$transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
				$transaction->message = t("Rejected payment");
				echo 'Rejected payment';
				break;
			case 'completed':
				$transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
				$transaction->message = t("Success payment");
				echo 'OK';
				break;
			default:
				$transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
				$transaction->message = t("Success payment");
				echo 'Pending payment';
				break;
		}
		commerce_payment_transaction_save($transaction);
	return true;
}

function commerce_dotpay_price_validate($transaction, $order, $amount){
	$wrapper = entity_metadata_wrapper('commerce_order', $order);
	$orderAmount = $wrapper->commerce_order_total->amount->value();
	$orderCurrency = $wrapper->commerce_order_total->currency_code->value();
	$amountOrderDecimal = commerce_dotpay_price_amount($orderAmount, $orderCurrency);
	$amountTransactionDecimal = commerce_dotpay_price_amount($transaction->amount, $transaction->currency_code);
	if(($amountTransactionDecimal == $amountOrderDecimal) && ($amountOrderDecimal == $amount)){
		return true;
	}
	return false;
}

function commerce_dotpay_calculate_hash($pin, $vars){
	$string = $pin .
		(isset($vars['id']) ? $vars['id'] : '').
		(isset($vars['operation_number']) ? $vars['operation_number'] : '').
		(isset($vars['operation_type']) ? $vars['operation_type'] : '').
		(isset($vars['operation_status']) ? $vars['operation_status'] : '').
		(isset($vars['operation_amount']) ? $vars['operation_amount'] : '').
		(isset($vars['operation_currency']) ? $vars['operation_currency'] : '').
		(isset($vars['operation_withdrawal_amount']) ? $vars['operation_withdrawal_amount'] : '').
		(isset($vars['operation_commission_amount']) ? $vars['operation_commission_amount'] : '').
		(isset($vars['operation_original_amount']) ? $vars['operation_original_amount'] : '').
		(isset($vars['operation_original_currency']) ? $vars['operation_original_currency'] : '').
		(isset($vars['operation_datetime']) ? $vars['operation_datetime'] : '').
		(isset($vars['operation_related_number']) ? $vars['operation_related_number'] : '').
		(isset($vars['control']) ? $vars['control'] : '').
		(isset($vars['description']) ? $vars['description'] : '').
		(isset($vars['email']) ? $vars['email'] : '').
		(isset($vars['p_info']) ? $vars['p_info'] : '').
		(isset($vars['p_email']) ? $vars['p_email'] : '').
		(isset($vars['channel']) ? $vars['channel'] : '').
		(isset($vars['channel_country']) ? $vars['channel_country'] : '').
		(isset($vars['geoip_country']) ? $vars['geoip_country'] : '');
	return hash('sha256', $string);
}

function commerce_dotpay_commerce_payment_method_info() {
	$payment_methods = array();
	$payment_methods['commerce_dotpay_payment'] = array(
		'base' => 'commerce_dotpay_payment',
		'title' => t('Dotpay payment solution'),
		'display_title' => t('Pay with a dotpay'),
		'description' => t('Dotpay payment solution'),
		'terminal' => FALSE,
		'offsite' => TRUE,
		'offsite_autoredirect' => false,
		'active' => TRUE,
	);
	return $payment_methods;
}

function commerce_dotpay_payment_settings_form($settings = NULL) {

	$settings = (array) $settings + commerce_dotpay_paynment_default_settings();

	$form = array();

	$form['identifier'] = array(
		'#type' => 'textfield',
		'#title' => t('identifier'),
		'#description' => t('description identifier'),
		'#default_value' => $settings['identifier'],
		'#required' => TRUE,
	);

	$form['pin'] = array(
		'#type' => 'textfield',
		'#title' => t('pin'),
		'#description' => t('description pin'),
		'#default_value' => $settings['pin'],
		'#required' => TRUE,
	);

	$form['env'] = array(
		'#type' => 'select',
		'#title' => t('Dotpay test / production'),
		'#options' => array(
			'test' => t('test'),
			'production' => t('production')
		),
	);


	return $form;
}

function commerce_dotpay_paynment_default_settings(){
	return array(
		'identifier' => '',
		'pin' => '',
	);
}

function commerce_dotpay_payment_redirect_form($form, &$form_state, $order, $payment_method) {

	if (empty($payment_method['settings']['identifier'])) {
		drupal_set_message(t('Dotpay is not configured for use. Merchant id has not been specified.'), 'error');
		return array();
	}

	if (empty($payment_method['settings']['pin'])) {
		drupal_set_message(t('Dotpay is not configured for use. Merchant pin has not been specified.'), 'error');
		return array();
	}

	$settings = array(
		// Return to the previous page when payment is canceled
		'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
		// Return to the payment redirect page for processing successful payments
		'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
		// Url to get POST result of payment.
		'merchant_url' => url('dotpay/callback/'. $payment_method['instance_id'], array('absolute' => TRUE)),
	);

	return commerce_dotpay_order_form($form, $form_state, $order, $payment_method + $settings );
}

function commerce_dotpay_order_form($form, $form_state, $order, $payment_method){
	$wrapper = entity_metadata_wrapper('commerce_order', $order);
	$lang = commerce_dotpay_get_and_validateLanguage();

	$amount = $wrapper->commerce_order_total->amount->value();
	$currency = $wrapper->commerce_order_total->currency_code->value();

	if (!commerce_dotpay_is_allowed_currency($currency)) {
		drupal_set_message(t('Dotpay is not configured for this currency.'), 'error');
		return array();
	}

	$amountDecimal = commerce_dotpay_price_amount($amount, $currency);

	commerce_dotpay_create_payment_transaction($order, $payment_method, $amount, $currency);

	$form['#action'] = commerce_dotpay_get_url($payment_method['settings']['env']);

	$data = array(
		'id' => $payment_method['settings']['identifier'],
		'amount' => $amountDecimal,
		'currency' => $currency,
		'control' => $order->order_id,
		'description'  => t('Order @order_number at @store', array('@order_number' => $order->order_id, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
		'lang' =>$lang,
		'URL' => $payment_method['return'],
		'URLC' => $payment_method['merchant_url'],
		'type' => DOTPAY_PAYMENT_TYPE,
		'api_version' => DOTPAY_API_VERSION,
		// below additional optional parameters
		'firstname' => $wrapper->commerce_customer_billing->commerce_customer_address->first_name->value(),
		'lastname' => $wrapper->commerce_customer_billing->commerce_customer_address->first_name->value(),
		'email'	=> $order->mail,
		'city'	=> $wrapper->commerce_customer_billing->commerce_customer_address->locality->value(),
		'postcode' => $wrapper->commerce_customer_billing->commerce_customer_address->postal_code->value(),
		'country' => $wrapper->commerce_customer_billing->commerce_customer_address->country->value(),
	);



	foreach ($data as $name => $value) {
		$form[$name] = array(
			'#type' => 'textfield',
			'#value' => $value,
		);
	}

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Redirect to Dotpay platform'),
	);
	return $form;
}

function commerce_dotpay_is_allowed_currency($currency){
	if(in_array( $currency, commerce_dotpay_currencies() )){
		return true;
	}
}

function commerce_dotpay_price_amount($amount, $currency_code) {
	$rounded_amount = commerce_currency_round($amount, commerce_currency_load($currency_code));
	return number_format(commerce_currency_amount_to_decimal($rounded_amount, $currency_code), 2, '.', '');
}

function commerce_dotpay_create_payment_transaction( $order,$payment_method, $amount, $currency){
	$transactions = commerce_payment_transaction_load_multiple(array(), array('instance_id' => $payment_method['instance_id'], 'status' => COMMERCE_PAYMENT_STATUS_PENDING, 'order_id' => $order->order_id));
	$transaction = array_pop($transactions);
	if(!$transaction){
	$transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
	$transaction->instance_id = $payment_method['instance_id'];
	$transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
	$transaction->amount = $amount;
	$transaction->currency_code = $currency;
	commerce_payment_transaction_save($transaction);
	}

	return $transaction->transaction_id;
}

function commerce_dotpay_get_and_validateLanguage(){
	global $language;
	$allowedLanguages = commerce_dotpay_languages();

	if (!array_key_exists($language->language, $allowedLanguages)){
		return 'en';

	}

	return $language->language;
};

function commerce_dotpay_languages(){
	return array(
		'pl' => t('Polish'),
		'en' => t('English'),
		'de' => t('German'),
		'it' => t('Italian'),
		'fr' => t('French'),
		'es' => t('Spanish'),
		'cz' => t('Czech'),
		'ru' => t('Russian'),
		'bg' => t('Bulgarian')
		);
}

function commerce_dotpay_currencies(){
	return array( "EUR", "USD", "GBP", "JPY","CZK", "SEK", "PLN" );

}

function commerce_dotpay_get_url($env){
	switch ($env){
		case 'test':
			return 'https://ssl.dotpay.pl/test_payment/';
		case 'production':
			return 'https://ssl.dotpay.pl/';
	}
}

function commerce_dotpay_is_trusted_request(){
	if($_SERVER['REQUEST_METHOD'] != 'POST'){
		watchdog('commerce_dotpay', 'bad method - only POST method is allowed');
		return false;
	}
	if($_SERVER['REMOTE_ADDR'] != '195.150.9.37'){
		watchdog('commerce_dotpay', 'untrusted ip');
		return false;
	}
	return true;
}

